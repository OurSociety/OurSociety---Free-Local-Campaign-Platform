<?php
declare(strict_types = 1);

namespace OurSociety\Controller\Admin;

use Cake\Event\Event;
use Cake\I18n\Time;
use Cake\Network\Exception\BadRequestException;
use Cake\ORM\TableRegistry;
use CrudView\Breadcrumb\Breadcrumb;
use OurSociety\Controller\Action\DashboardAction;
use OurSociety\Model\Entity\User;
use OurSociety\Model\Table\UsersTable;
use Psr\Http\Message\ResponseInterface as Response;
use OurSociety\Controller\CrudController;

/**
 * UsersController.
 *
 * @property UsersTable $Users
 */
class UsersController extends CrudController
{
    public function beforeFilter(Event $event)
    {
        $this->Crud->mapAction('dashboard', ['className' => DashboardAction::class]);

        parent::beforeFilter($event); // @todo Change the autogenerated stub
    }

    public function dashboard(): ?Response
    {
        //$this->Crud->mapAction(DashboardAction::class);
        //
        //$this->Crud->setConfig([
        //    'scaffold' => [
        //        'panels' => [
        //            [
        //                ['type' => 'element', 'element' => 'Dashboard/Chart/user_cohort'],
        //            ],
        //            [
        //                [
        //                    // DashboardWidgetCell
        //                    'type' => 'number',
        //                    'label' => __('# Total Users'),
        //                    'icon' => 'camera',
        //                    'theme' => 'purple',
        //                    'callable' => function (): array {
        //                        return [
        //                            'count' => $this->Users->find()->count(),
        //                        ];
        //                    }
        //                ],
        //                //[
        //                //    'type' => 'cell',
        //                //    'cell' => 'Dashboard/NumberWidget',
        //                //    'data' => ['# Users', $totalCount, $weeklyIncrease, 'purple', 'camera']
        //                //],
        //                //[
        //                //    'type' => 'cell',
        //                //    'cell' => 'Dashboard/NumberWidget',
        //                //    'data' => ['# Active', $activeCount, $weeklyIncrease, 'purple', 'camera']],
        //                //[
        //                //    'type' => 'cell',
        //                //    'cell' => 'Dashboard/NumberWidget',
        //                //    'data' => ['# Verified', $verifiedCount, $weeklyIncrease, 'purple', 'camera']],
        //                //[
        //                //    'type' => 'cell',
        //                //    'cell' => 'Dashboard/NumberWidget',
        //                //    'data' => ['# Unverified', $unverifiedCount, $weeklyIncrease, 'purple', 'camera']],
        //                //[
        //                //    'type' => 'cell',
        //                //    'cell' => 'Dashboard/NumberWidget',
        //                //    'data' => ['# Citizens', $citizenCount, $weeklyIncrease, 'purple', 'camera']],
        //                //[
        //                //    'type' => 'cell',
        //                //    'cell' => 'Dashboard/NumberWidget',
        //                //    'data' => ['# Politicians', $politicianCount, $weeklyIncrease, 'purple', 'camera']],
        //            ],
        //        ],
        //    ],
        //]);
        //
        //return $this->Crud->execute();

        switch ($this->request->getQuery('range', 'week')) {
            case 'week': $days = 7; break;
            case 'month': $days = 31; break;
            case 'year': $days = 365; break;
            default: throw new NotFoundException('Invalid range');
        }

        $this->set([
            //'totals' => TableRegistry::get('DashboardTotals')->find('dashboard', [
            //    'dashboard' => 'users',
            //    'period' => $this->request->getQuery('range', 'week'),
            //]),
//            'countTotal' => $this->Users->find()->count(),
//            'countActive' => $this->Users->find()->where(['Users.last_seen >' => Time::now()->subMinutes(15)])->count(),
//            'countVerified' => $this->Users->find()->where(['Users.verified IS NOT' => null])->count(),
//            'countUnverified' => $this->Users->find()->where(['Users.verified IS' => null])->count(),
//            'countAdmin' => $this->Users->find()->where(['Users.role' => User::ROLE_ADMIN])->count(),
//            'countCitizen' => $this->Users->find()->where(['Users.role' => User::ROLE_CITIZEN])->count(),
//            'countPolitician' => $this->Users->find()->where(['Users.role' => User::ROLE_POLITICIAN])->find('isVerified')->count(),
//            'increaseWeekly' => $this->Users->query()->getConnection()->execute(<<<SQL
//SELECT (
//	(SELECT COUNT(*) FROM users WHERE last_seen > NOW() - INTERVAL $days DAY + INTERVAL $days DAY) /
//	(SELECT COUNT(*) FROM users WHERE last_seen < NOW() - INTERVAL $days DAY AND last_seen > NOW() - INTERVAL $days DAY - INTERVAL $days DAY)
//) * 100 AS weekly_increase
//SQL
//            )->fetch()[0],
//            'increaseMonthly' => $this->Users->query()->getConnection()->execute(<<<SQL
//SELECT (
//	(SELECT COUNT(*) FROM users WHERE last_seen > NOW() - INTERVAL $days DAY + INTERVAL $days DAY) /
//	(SELECT COUNT(*) FROM users WHERE last_seen < NOW() - INTERVAL $days DAY AND last_seen > NOW() - INTERVAL $days DAY - INTERVAL $days DAY)
//) * 100 AS weekly_increase
//SQL
//            )->fetch()[0],
//            'increaseYearly' => $this->Users->query()->getConnection()->execute(<<<SQL
//SELECT (
//	(SELECT COUNT(*) FROM users WHERE last_seen > NOW() - INTERVAL $days DAY + INTERVAL $days DAY) /
//	(SELECT COUNT(*) FROM users WHERE last_seen < NOW() - INTERVAL $days DAY AND last_seen > NOW() - INTERVAL $days DAY - INTERVAL $days DAY)
//) * 100 AS weekly_increase
//SQL
//            )->fetch()[0],
            'recentlyCreatedUsers' => $this->Users->find('recentlyCreated'),
            'recentlyActiveUsers' => $this->Users->find('recentlyActive'),
        ]);

        //dd($this->viewVars);

        $this->Crud->action()->setConfig([
            'scaffold' => [
                'fields' => [
                    'name' => ['title' => 'Full Name'],
                    'role',
                    'answer_count' => ['title' => 'Answers'],
                    'email',
                    'last_seen',
                    'verified' => ['element' => 'asd'],
                ],
                'breadcrumbs' => [
                    new Breadcrumb('Users'),
                    new Breadcrumb('Dashboard'),
                ],
            ]
        ]);

        return $this->Crud->execute();
    }

    public function index(): ?Response
    {
        $this->Crud->addListener('CrudView.ViewSearch', ['enabled' => true]);

        $this->Crud->action()->setConfig([
            'scaffold' => [
                'fields' => [
                    'name' => ['title' => 'Full Name'],
                    'role',
                    'answer_count' => ['title' => 'Answers'],
                    'email',
                    'last_seen',
                    'verified' => ['element' => 'asd'],
                ],
                'breadcrumbs' => [
                    new Breadcrumb('Dashboard', ['_name' => 'admin:users:dashboard']),
                    new Breadcrumb('Home'),
                ],
            ]
        ]);

        return $this->Crud->execute();
    }

    public function add(): ?Response
    {
        $this->Crud->action()->setConfig('scaffold.fields', ['name', 'email', 'verified']);

        return $this->Crud->execute();
    }

    public function edit(): ?Response
    {
        $this->Crud->action()->setConfig('scaffold.fields', ['id', 'name', 'email', 'verified']);

        return $this->Crud->execute();
    }

    public function view(): ?Response
    {
        $this->Crud->action()->setConfig('scaffold.fields', ['name', 'email', 'verified', 'created', 'modified']);

        return $this->Crud->execute();
    }

    public function switch(): ?Response
    {
        if (!$this->request->is(['put', 'post'])) {
            throw new BadRequestException('Only accepts PUT/POST requests.');
        }

        /** @var User $user */
        $user = $this->loadModel('Users')->find()->where(['slug' => $this->request->getData('user')])->firstOrFail();

        /** @var User $authAdmin */
        $authAdmin = $this->request->session()->read('Auth.Admin');

        if ($authAdmin === null) {
            $this->request->session()->write('Auth.Admin', $this->Auth->user());
            $this->Flash->warning(__('You have assumed the identity of {name}.', ['name' => $user->name]));
        } elseif ($user->id === $authAdmin->id) {
            $this->request->session()->delete('Auth.Admin');
            $this->Flash->info(__('Your identity has been reverted back to {name}.', ['name' => $user->name]));
        }

        $this->Auth->setUser($user);

        return $this->redirect(['_name' => sprintf('%s:dashboard', $user->role)]);
    }

    public function export(): ?Response
    {
        return $this->Crud->execute();
    }
}
