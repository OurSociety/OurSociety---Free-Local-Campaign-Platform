version: 2
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - deploy_staging:
          requires: [ build ]
          # TODO: Uncomment after finishing CI/CD, but before merging PR to master
          #filters: { branches: { only: master } }
jobs:
  build:
    docker:
      - image: deizel/circleci-php:7.1-fpm-node-browsers
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: app
          MYSQL_PASSWORD: secret
          MYSQL_DATABASE: oursociety_test
    steps:
      - checkout
      - restore_cache:
          name: Restore Node Modules From Cache
          key: yarn-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Install Node Modules
          command: |
            yarn install
      - run:
          name: Compile Assets
          command: |
            yarn prod
      - save_cache:
          name: Save Node Modules To Cache
          key: yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Remove Node Modules
          command: |
            rm -rf node_modules
      - restore_cache:
          name: Restore Composer Packages From Cache
          key: composer-v1-{{ checksum "composer.lock" }}
      - run:
          name: Install Production Composer Packages
          command: |
            composer install --optimize-autoloader --prefer-dist --no-interaction --no-dev --no-progress
      - run:
          name: Create Artifacts
          command: |
            mkdir /tmp/artifacts
            tar czf /tmp/artifacts/oursociety-production.tar.gz --exclude=".+" .
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: Install Development Composer Packages
          command: |
            composer install --optimize-autoloader --prefer-dist --no-interaction --no-progress
      - save_cache:
          name: Save Composer Packages To Cache
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - ~/.composer/cache
      - run:
          name: Check MySQL Connection
          command: |
            dockerize -wait tcp://:3306
      - run:
          name: Configure Hosts
          command: |
            echo "127.0.0.1 oursociety.test" | sudo tee -a /etc/hosts
      - run:
          name: Configure Web Server
          command: |
            sudo cp .circleci/nginx.conf /etc/nginx/sites-available/default
      - run:
          name: Start Web Server
          command: |
            sudo /etc/init.d/nginx start
      - run:
          name: Start PHP Server
          command: |
            sudo php-fpm --daemonize
      - run:
          name: Configure Test Environment
          command: |
            cp .env.test.default .env.test
      - run:
          name: Seed Test Database
          command: |
            bin/cake fixtures restore
            bin/cake fixtures migrate
      - run:
          name: Fix Permissions
          command: |
            sudo chmod -Rv 777 logs tmp
      - run:
          name: Output Application Homepage
          command: |
            STATUSCODE=$(curl --silent --output /dev/stderr --write-out "%{http_code}" http://oursociety.test/)

            if test $STATUSCODE -ne 200; then
                exit 1
            fi
      - run:
          name: Run Acceptance Tests
          command: |
            vendor/bin/behat --no-snippets --profile=circleci --strict -vv features/guest/navigation.feature
  deploy_staging:
    docker:
      - image: circleci/php:7.1-fpm-node
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Fetch ansible recipes
          command: |
            # TODO: Coordinate with @benbakelaar to set up GitHub deploy key for access to following repo:
            # git clone "git@github.com:${CIRCLE_PROJECT_USERNAME}/oursociety-infra.git" /home/circleci/infra
      - deploy:
          name: Deploy to Staging Environment
          command: |
            # TODO: Coordinate with @jason for exact Ansible commands to run:
            # ansible-playbook app.yml -i staging
      - deploy:
          name: "Notify #development Slack channel"
          command: |
            # TODO: Slack notification for successful deploys
            # curl -X POST -H "Content-type: application/json" --data '{"text":"Successful deployment to <http://dev.oursociety.org\|staging environment>"}' "${SLACK_WEBHOOK_URL}"
