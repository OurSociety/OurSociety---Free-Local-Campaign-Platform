version: 2
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - deploy_staging:
          requires: [ build ]
          # TODO: Uncomment after finishing CI/CD, but before merging PR to master
          #filters: { branches: { only: master } }
jobs:
  build:
    docker:
      - image: circleci/php:7.1-fpm-node
      - image: mysql:5.7.17
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: app
          MYSQL_PASSWORD: secret
          MYSQL_DATABASE: test
    working_directory: /home/circleci/app
    steps:
      - checkout
      - run:
          name: Install PHP Modules
          command: |
            sudo apt-get update
            sudo apt-get install -y zlib1g-dev libicu-dev
            sudo docker-php-ext-configure intl
            sudo docker-php-ext-configure pdo_mysql
            sudo docker-php-ext-install intl pdo_mysql
      - run:
          name: Install Composer
          command: |
            sudo chown circleci /usr/local/bin
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php --install-dir=/usr/local/bin --filename=composer
            php -r "unlink('composer-setup.php');"
      - restore_cache:
          name: Restore Compose Packages From Cache
          key: v1-composer-packages-{{ checksum "composer.lock" }}
      - run:
          name: Install Composer Packages
          command: |
            composer install --optimize-autoloader --prefer-dist --no-interaction --no-progress
      - save_cache:
          name: Save Composer Packages To Cache
          key: v1-composer-packages-{{ checksum "composer.lock" }}
          paths:
            - /home/circleci/app/vendor
      - run:
          name: Check MySQL Connection
          command: |
            dockerize -wait tcp://:3306
      - run:
          name: Run Unit/Integration Tests
          environment:
            DATABASE_TEST_URL: mysql://app:secret@127.0.0.1/test?encoding=utf8mb4
          command: |
            vendor/bin/phpunit
  deploy_staging:
    docker:
      - image: circleci/php:7.1-fpm-node
    working_directory: /home/circleci/app
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Fetch ansible recipes
          command: |
            # TODO: Coordinate with @benbakelaar to set up GitHub deploy key for access to following repo:
            # git clone "git@github.com:${CIRCLE_PROJECT_USERNAME}/oursociety-infra.git" /home/circleci/infra
      - deploy:
          name: Deploy to Staging Environment
          command: |
            # TODO: Coordinate with @jason for exact Ansible commands to run:
            # ansible-playbook app.yml -i staging
      - deploy:
          name: "Notify #development Slack channel"
          command: |
            # TODO: Slack notification for successful deploys
            # curl -X POST -H "Content-type: application/json" --data '{"text":"Successful deployment to <http://dev.oursociety.org\|staging environment>"}' "${SLACK_WEBHOOK_URL}"
